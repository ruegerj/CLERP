{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "CLERP API v1",
    "description": "REST Web-Api-Backend for the CLERP application"
  },
  "paths": {
    "/api/v1/Department": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Gets all roles",
        "operationId": "GetAllDepartments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          
        ],
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DepartmentGetAllResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Department"
        ],
        "summary": "Creates a department",
        "operationId": "CreateDepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "createData",
            "in": "body",
            "description": "Data for creating a new departmen",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DepartmentCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department successfuly created",
            "schema": {
              "$ref": "#/definitions/DepartmentCreateResponse"
            }
          },
          "409": {
            "description": "Entered data conflicts with existing",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Department/{id}": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Gets an department by the id",
        "operationId": "GetDepartmentById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the department",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Department found",
            "schema": {
              "$ref": "#/definitions/DepartmentResponse"
            }
          },
          "404": {
            "description": "Department couldn't be found",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Department"
        ],
        "summary": "Updates a department",
        "operationId": "UpdateDepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updateData",
            "in": "body",
            "description": "Updated department data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DepartmentUpdateRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the department to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Department successfuly updated",
            "schema": {
              "$ref": "#/definitions/DepartmentResponse"
            }
          },
          "400": {
            "description": "Department couldn't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Department"
        ],
        "summary": "Deletes a department",
        "operationId": "DeleteDepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the department",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Department deleted successfuly"
          },
          "400": {
            "description": "Department coulnd't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Department/add-employee": {
      "post": {
        "tags": [
          "Department"
        ],
        "summary": "Adds an employee to a department",
        "operationId": "AddEmployeeToDepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentAddEmployeeData",
            "in": "body",
            "description": "Data for adding an employee to a department",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DepartmentAddEmployeeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee successfuly added to the department"
          },
          "400": {
            "description": "Department or employee couln't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "409": {
            "description": "Can't add employee, the department has this employee added already",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Department/remove-employee": {
      "post": {
        "tags": [
          "Department"
        ],
        "summary": "Removes an employee from a department",
        "operationId": "RemoveEmployeeFromDepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentRemoveEmployeeData",
            "in": "body",
            "description": "Data for removing an employee from a department",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DepartmentRemoveEmployeeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee successfuly removed from the department"
          },
          "400": {
            "description": "Emplyoee or department couln't be found, or the department doesn't have this employee added",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Employee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Gets all employees",
        "operationId": "GetAll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          
        ],
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmployeeGetAllResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Employee/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Gets an employee by his id",
        "operationId": "GetEmployeeById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the requested employee",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee found",
            "schema": {
              "$ref": "#/definitions/EmployeeResponse"
            }
          },
          "404": {
            "description": "Employee couldn't be found",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Updates the data from an employee",
        "operationId": "UpdateEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updateData",
            "in": "body",
            "description": "Data to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeeUpdateRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the employee",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee successfuly updated",
            "schema": {
              "$ref": "#/definitions/EmployeeResponse"
            }
          },
          "400": {
            "description": "Employee couldn't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Deletes an employee",
        "operationId": "DeleteEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Guid/Id from the employee",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee successfuly deleted"
          },
          "400": {
            "description": "Employee to delete couldn't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Employee/create": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Creates an employee",
        "operationId": "CreateEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "createData",
            "in": "body",
            "description": "Required data for creating an employee",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeeCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee successfuly created"
          },
          "409": {
            "description": "Entered data conflicts with existing",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Employee/login": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Logs a employee in and returns the created Jwt",
        "operationId": "Login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loginData",
            "in": "body",
            "description": "Username and password from the employee",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeeLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successsful",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "400": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/ProductType": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Gets all product types",
        "operationId": "GetAllProductTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          
        ],
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductTypeGetAllResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Creates a new product type",
        "operationId": "CreateProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "createData",
            "in": "body",
            "description": "Data for creating a new product type",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductTypeCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProductType successfuly created",
            "schema": {
              "$ref": "#/definitions/ProductTypeCreateResponse"
            }
          },
          "409": {
            "description": "Entered data conflicts with existing",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/{id}": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Gets a product type by the id",
        "operationId": "GetProductTypeById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product type",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ProductType found",
            "schema": {
              "$ref": "#/definitions/ProductTypeResponse"
            }
          },
          "404": {
            "description": "ProductType couldn't be found",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProductType"
        ],
        "summary": "Updates a product type",
        "operationId": "UpdateProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updateData",
            "in": "body",
            "description": "Data for updating a product type",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductTypeUpdateRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product type",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ProductType successfuly updated",
            "schema": {
              "$ref": "#/definitions/ProductTypeResponse"
            }
          },
          "400": {
            "description": "ProductType couldn't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductType"
        ],
        "summary": "Deletes a product type",
        "operationId": "DeleteProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the prodcut type",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ProductType deleted successfuly"
          },
          "400": {
            "description": "ProductType coulnd't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/add-parent": {
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Adds a product type as a new parent to a product type",
        "operationId": "AddParentProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productTypeAddParenData",
            "in": "body",
            "description": "Data for adding a new parent product type",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductTypeAddParentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parent successfuly added"
          },
          "400": {
            "description": "Product type or parent product type coulnd't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "409": {
            "description": "Entered data conflicts with existing",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/add-child": {
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Adds a product type as a new child to a product type",
        "operationId": "AddChildProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productTypeAddChildData",
            "in": "body",
            "description": "Data for adding a new child product type",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductTypeAddChildRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Child successfuly added"
          },
          "400": {
            "description": "Product type or child product type coulnd't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "409": {
            "description": "Entered data conflicts with existing",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/remove-parent": {
      "delete": {
        "tags": [
          "ProductType"
        ],
        "summary": "Removes a parent product type from a product type (base)",
        "operationId": "RemoveParentProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productTypeRemoveParentData",
            "in": "body",
            "description": "Data for removing the parent from the base product type",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductTypeRemoveParentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parent successfuly removed from the product type"
          },
          "400": {
            "description": "Parent or base product type couln't be found, or the base product type doesn't have this product type as parent",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/remove-child": {
      "delete": {
        "tags": [
          "ProductType"
        ],
        "summary": "Removes a child product type from a product type (base)",
        "operationId": "RemoveChildProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productTypeRemoveChildData",
            "in": "body",
            "description": "Data for removing the child from the base product type",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductTypeRemoveChildRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Child successfuly removed from the product type"
          },
          "400": {
            "description": "Child or base product type couln't be found, or the base product type doesn't have this product type as child",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Role": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Gets all roles",
        "operationId": "GetAllDepartments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          
        ],
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RoleGetAllResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Creates a role",
        "operationId": "CreateRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "createData",
            "in": "body",
            "description": "Data for creating a new role",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfuly created",
            "schema": {
              "$ref": "#/definitions/RoleCreateResponse"
            }
          },
          "409": {
            "description": "Entered data conflicts with existing",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Role/{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Gets a role by id",
        "operationId": "GetRoleById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the role",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Role found",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "404": {
            "description": "Role couldn't be found",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Updates a role",
        "operationId": "UpdateRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updateData",
            "in": "body",
            "description": "Updated role data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleUpdateRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the role",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfuly updated",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "description": "Role couldn't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Deletes a role",
        "operationId": "DeleteRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the role",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfuly"
          },
          "400": {
            "description": "Role coulnd't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Role/add-to-employee": {
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Add's a certain role to an employee",
        "operationId": "AddRoleToEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleAddEmployeeData",
            "in": "body",
            "description": "Data for adding a role to an employee",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAddToEmployeeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfuly added to the employee"
          },
          "400": {
            "description": "Role or employee couln't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "409": {
            "description": "Can't add role, the employee has this role already",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Role/add-to-department": {
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Adds a certain role to a department",
        "operationId": "AddRoleToDepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleAddDepartmentData",
            "in": "body",
            "description": "Data for adding a role to a department",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAddToDepartmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfuly added to the department"
          },
          "400": {
            "description": "Role or department couln't be found",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "409": {
            "description": "Can't add role, the department has this role already",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Role/remove-from-employee": {
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Removes a certain role from an employee",
        "operationId": "RemoveRoleFromEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "removeRoleFromEmployeeData",
            "in": "body",
            "description": "Data for removing a role from an employee",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleRemoveFromEmployeeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfuly removed from the employee"
          },
          "400": {
            "description": "Role or employee couln't be found, or the employee doesn't have the role",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Role/remove-from-department": {
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Removes a certain role from a department",
        "operationId": "RemoveRoleFromDepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "removeRoleFromDepartmentData",
            "in": "body",
            "description": "Data for removing the role from the department",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleRemoveFromDepartmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfuly removed from the department"
          },
          "400": {
            "description": "Role or department couln't be found, or the department doesn't have the role",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Values": {
      "get": {
        "tags": [
          "Values"
        ],
        "operationId": "Get",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Values"
        ],
        "operationId": "Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/api/v1/Values/{id}": {
      "get": {
        "tags": [
          "Values"
        ],
        "operationId": "Get",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Values"
        ],
        "operationId": "Put",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "value",
            "in": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Values"
        ],
        "operationId": "Delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "422": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/ValidationFailedResponse"
            }
          },
          "500": {
            "description": "An unknown error occured",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DepartmentGetAllResponse": {
      "type": "object",
      "properties": {
        "departments": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/DepartmentResponse"
          }
        }
      }
    },
    "DepartmentResponse": {
      "description": "Default response dto for a department",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "title": {
          "description": "Title of the department",
          "type": "string"
        },
        "description": {
          "description": "Description of the deparment",
          "type": "string"
        }
      }
    },
    "MessageResponse": {
      "description": "A response contianer when just a message have to be returned",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "DepartmentCreateRequest": {
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "title": {
          "maxLength": 30,
          "minLength": 2,
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "DepartmentCreateResponse": {
      "type": "object",
      "properties": {
        "department-id": {
          "format": "uuid",
          "description": "Id of the generated department",
          "type": "string"
        }
      }
    },
    "ConflictResponse": {
      "description": "Payload of a CLERP.API.Infrastructure.Exceptions.ConflictException",
      "type": "object",
      "properties": {
        "field": {
          "description": "Name of the property which caused the conflict",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Message about the reason/background of the conflict",
          "type": "string"
        }
      }
    },
    "ValidationFailedResponse": {
      "description": "Represents the summary of all validation errors\r\nData-Format that will be returned after a failed validation",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "readOnly": true
        },
        "validation-errors": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          },
          "readOnly": true
        }
      }
    },
    "ValidationError": {
      "description": "Represents a validation error, occured when validating an incoming model",
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DepartmentUpdateRequest": {
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "title": {
          "maxLength": 30,
          "minLength": 2,
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "BadRequestResponse": {
      "description": "Payload of CLERP.API.Infrastructure.Exceptions.BadRequestException",
      "type": "object",
      "properties": {
        "error-message": {
          "description": "Error message, which explains that something went wrong",
          "type": "string"
        }
      }
    },
    "DepartmentAddEmployeeRequest": {
      "type": "object",
      "properties": {
        "department-id": {
          "format": "uuid",
          "description": "Id of the department which the employee should be added to",
          "type": "string"
        },
        "employee-id": {
          "format": "uuid",
          "description": "Id of the employee which should be added to the department",
          "type": "string"
        }
      }
    },
    "DepartmentRemoveEmployeeRequest": {
      "type": "object",
      "properties": {
        "department-id": {
          "format": "uuid",
          "description": "Id of the department which the employee should be removed from",
          "type": "string"
        },
        "employee-id": {
          "format": "uuid",
          "description": "Id of the employee which should be removed from the department",
          "type": "string"
        }
      }
    },
    "EmployeeGetAllResponse": {
      "type": "object",
      "properties": {
        "employees": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployeeResponse"
          }
        }
      }
    },
    "EmployeeResponse": {
      "description": "Default response dto for an employee",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "birthday": {
          "format": "date-time",
          "type": "string"
        },
        "phone-number": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "EmployeeUpdateRequest": {
      "required": [
        "lastname",
        "firstname",
        "email",
        "birthday"
      ],
      "type": "object",
      "properties": {
        "lastname": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "firstname": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "minLength": 1,
          "pattern": "^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-||_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+([a-z]+|\\d|-|\\.{0,1}|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])?([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$",
          "type": "string"
        },
        "phone-number": {
          "type": "string"
        },
        "birthday": {
          "format": "date-time",
          "type": "string"
        },
        "current-password": {
          "description": "The current plain password of the employee, can be null  if a password change shouldn't be performed",
          "type": "string"
        },
        "new-password": {
          "description": "The new plain password from the employee, can be null if password change shouldn't be performed",
          "type": "string"
        }
      }
    },
    "EmployeeCreateRequest": {
      "required": [
        "lastname",
        "firstname",
        "email",
        "username",
        "password",
        "birthday"
      ],
      "type": "object",
      "properties": {
        "lastname": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "firstname": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "minLength": 1,
          "pattern": "^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-||_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+([a-z]+|\\d|-|\\.{0,1}|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])?([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$",
          "type": "string"
        },
        "phone-number": {
          "type": "string"
        },
        "username": {
          "maxLength": 15,
          "minLength": 5,
          "type": "string"
        },
        "password": {
          "description": "Plain password",
          "maxLength": 50,
          "minLength": 10,
          "type": "string"
        },
        "birthday": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "EmployeeLoginRequest": {
      "required": [
        "username",
        "password"
      ],
      "type": "object",
      "properties": {
        "username": {
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "password": {
          "description": "Plain password",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "TokenResponse": {
      "description": "Response after an employee is logged in",
      "type": "object",
      "properties": {
        "token": {
          "description": "Access token for the employee",
          "type": "string"
        }
      }
    },
    "ProductTypeGetAllResponse": {
      "type": "object",
      "properties": {
        "product-types": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTypeResponse"
          }
        }
      }
    },
    "ProductTypeResponse": {
      "description": "Default response dto for a product type",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ean": {
          "description": "European articel number",
          "type": "string"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "child-ids": {
          "description": "All ids from the entities related as children to this product type",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "parent-ids": {
          "description": "All ids from the entities related as paretns to this product type",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "ProductTypeCreateRequest": {
      "required": [
        "name",
        "ean",
        "price"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 50,
          "minLength": 2,
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ean": {
          "description": "European Article Number",
          "minLength": 1,
          "type": "string"
        },
        "price": {
          "format": "double",
          "minimum": 0.01,
          "exclusiveMinimum": true,
          "minLength": 1,
          "type": "number"
        },
        "parent-ids": {
          "description": "Collection with all ids of all parent product types",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "child-ids": {
          "description": "Collection with all ids of all the child product types",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "ProductTypeCreateResponse": {
      "type": "object",
      "properties": {
        "product-type-id": {
          "format": "uuid",
          "description": "Id of the created product type",
          "type": "string"
        }
      }
    },
    "ProductTypeUpdateRequest": {
      "required": [
        "name",
        "ean",
        "price"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 50,
          "minLength": 2,
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ean": {
          "description": "European Article Number",
          "minLength": 1,
          "type": "string"
        },
        "price": {
          "format": "double",
          "minimum": 0.01,
          "exclusiveMinimum": true,
          "minLength": 1,
          "type": "number"
        }
      }
    },
    "ProductTypeAddParentRequest": {
      "type": "object",
      "properties": {
        "parent-id": {
          "format": "uuid",
          "description": "Id of the new parent product type",
          "type": "string"
        },
        "base-id": {
          "format": "uuid",
          "description": "Id of the product type which the parent product type should be added to",
          "type": "string"
        }
      }
    },
    "ProductTypeAddChildRequest": {
      "type": "object",
      "properties": {
        "child-id": {
          "format": "uuid",
          "description": "Id of the new child product type",
          "type": "string"
        },
        "base-id": {
          "format": "uuid",
          "description": "Id of the product type which the child product type should be added to",
          "type": "string"
        }
      }
    },
    "ProductTypeRemoveParentRequest": {
      "type": "object",
      "properties": {
        "parent-id": {
          "format": "uuid",
          "description": "Id of the parent product type which should be removed",
          "type": "string"
        },
        "base-id": {
          "format": "uuid",
          "description": "Id of the product type which the parent should be removed from",
          "type": "string"
        }
      }
    },
    "ProductTypeRemoveChildRequest": {
      "type": "object",
      "properties": {
        "child-id": {
          "format": "uuid",
          "description": "Id of the child product type which should be removed",
          "type": "string"
        },
        "base-id": {
          "format": "uuid",
          "description": "Id of the product type which the child should be removed from",
          "type": "string"
        }
      }
    },
    "RoleGetAllResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleResponse"
          }
        }
      }
    },
    "RoleResponse": {
      "description": "Default response dto for a role",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "description": "Name of the role",
          "type": "string"
        },
        "description": {
          "description": "Optional description of the role",
          "type": "string"
        }
      }
    },
    "RoleCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 30,
          "minLength": 2,
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "RoleCreateResponse": {
      "type": "object",
      "properties": {
        "role-id": {
          "format": "uuid",
          "description": "Id of the new created role",
          "type": "string"
        }
      }
    },
    "RoleUpdateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 30,
          "minLength": 2,
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "RoleAddToEmployeeRequest": {
      "type": "object",
      "properties": {
        "role-id": {
          "format": "uuid",
          "description": "Id of the role which should be added to the employee",
          "type": "string"
        },
        "employee-id": {
          "format": "uuid",
          "description": "Id of the employee which the role should be added to",
          "type": "string"
        }
      }
    },
    "RoleAddToDepartmentRequest": {
      "type": "object",
      "properties": {
        "role-id": {
          "format": "uuid",
          "description": "Id of the role which should be added to the department",
          "type": "string"
        },
        "department-id": {
          "format": "uuid",
          "description": "Id of the department to role should be added to",
          "type": "string"
        }
      }
    },
    "RoleRemoveFromEmployeeRequest": {
      "type": "object",
      "properties": {
        "role-id": {
          "format": "uuid",
          "description": "Id of the role which should be removed from the employee",
          "type": "string"
        },
        "employee-id": {
          "format": "uuid",
          "description": "Id of the employee which the role should be removed from",
          "type": "string"
        }
      }
    },
    "RoleRemoveFromDepartmentRequest": {
      "type": "object",
      "properties": {
        "role-id": {
          "format": "uuid",
          "description": "Id of the role which should be removed from the department",
          "type": "string"
        },
        "department-id": {
          "format": "uuid",
          "description": "Id of the department to role should be removed from",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "name": "Authorization",
      "in": "header",
      "type": "apiKey",
      "description": "Please insert JWT with Bearer into field. Example: \"bearer {token}\""
    }
  },
  "security": [
    {
      "Bearer": [
        
      ]
    }
  ],
  "tags": [
    
  ]
}